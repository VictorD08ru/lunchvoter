DROP TABLE user_roles IF EXISTS;
DROP TABLE menu IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP TABLE users IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE GLOBAL_SEQ
  AS INTEGER
  START WITH 10000;

CREATE TABLE users
(
  id				  INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name				VARCHAR(255)            NOT NULL,
  email				VARCHAR(255)			      NOT NULL,
  password		VARCHAR(255)            NOT NULL,
  registered	TIMESTAMP DEFAULT now() NOT NULL,
  enabled			BOOLEAN DEFAULT TRUE    NOT NULL,
  CONSTRAINT users_unique_email_idx UNIQUE (email)
);

CREATE TABLE user_roles
(
  user_id			INTEGER					        NOT NULL,
  role				VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
	id				  INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
	name			  VARCHAR(255)			NOT NULL,
  CONSTRAINT restaurants_unique_name_idx UNIQUE (name)
);

CREATE TABLE menu
(
  id				  INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  dish				VARCHAR(100)		NOT NULL,
  price				INTEGER					NOT NULL,
  restaurant_id	INTEGER				NOT NULL,
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE,
  CONSTRAINT menu_unique_dish_per_restrnt_idx UNIQUE (dish, restaurant_id)
);

CREATE TABLE votes
(
  id				  INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  vote_date		DATE DEFAULT current_date		NOT NULL,
  user_id			INTEGER					            NOT NULL,
  restaurant_id		INTEGER,
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (restaurant_id) REFERENCES restaurants (id) ON DELETE SET NULL,
  CONSTRAINT votes_date_user_unique_idx UNIQUE (vote_date, user_id)
);